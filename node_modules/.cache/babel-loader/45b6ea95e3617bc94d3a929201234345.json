{"ast":null,"code":"import _regeneratorRuntime from \"c:\\\\Users\\\\alber\\\\Desktop\\\\ejemplo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"c:\\\\Users\\\\alber\\\\Desktop\\\\ejemplo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"c:\\\\Users\\\\alber\\\\Desktop\\\\ejemplo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"c:\\\\Users\\\\alber\\\\Desktop\\\\ejemplo\\\\src\\\\containers\\\\FormModel\\\\Converter\\\\converter.component.js\";\nimport React, { useCallback, useState } from 'react';\nimport { successToaster, errorToaster } from \"../../../utils\";\nimport { Select } from \"../../../components/Utils\";\nimport { ShexFormModel, FormModel } from '@inrupt/solid-sdk-forms';\nimport { ConverterTypesList, ConverterTypes } from \"../../../constants\";\nimport { useTranslation } from 'react-i18next';\nimport { Util } from '@shexjs/core';\nimport SHACLValidator from 'shacl-js';\nimport * as N3 from 'n3';\nimport { FormModelContainer, FormWrapper, Form, Input, Result, ResultHeader, Button, ConverterInput } from \"../form-model.style\";\n/**\n * Form Model Converter UI component, containing the styled components for the Form Model Converter\n * @param props\n */\n\nvar FormModelConverter = function FormModelConverter() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      schemaUrl = _useState2[0],\n      setSchemaUrl = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      layoutUrl = _useState4[0],\n      setLayoutUrl = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      formModel = _useState6[0],\n      setFormModel = _useState6[1];\n\n  var _useState7 = useState(t('formLanguage.shex')),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedInput = _useState8[0],\n      setSelectedInput = _useState8[1];\n\n  var _useState9 = useState(t('formLanguage.shexLayout')),\n      _useState10 = _slicedToArray(_useState9, 2),\n      layoutText = _useState10[0],\n      setLayoutText = _useState10[1];\n\n  var _useState11 = useState(t('formLanguage.shexShape')),\n      _useState12 = _slicedToArray(_useState11, 2),\n      shapeText = _useState12[0],\n      setShapeText = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      hasLayoutFile = _useState14[0],\n      setHasLayoutFile = _useState14[1]; // Temporarily filtering out anything except ShEx as that's all that works currently\n\n\n  var filteredOptions = ConverterTypesList.filter(function (item) {\n    return t(\"formLanguage.\".concat(item)) === t('formLanguage.shex');\n  });\n  var optionsList = filteredOptions.map(function (item) {\n    return t(\"formLanguage.\".concat(item));\n  });\n  var Meta = {\n    shexc: {\n      prefixes: {},\n      base: window.location.href\n    },\n    data: {\n      prefixes: {},\n      base: window.location.href\n    },\n    layout: {\n      prefixes: {},\n      base: window.location.href\n    }\n  }; // Temporary code for Shex Layout testing\n\n  /* eslint-disable */\n  // This is from Eric's code and is required for AnnotateSchema\n\n  var F = N3.DataFactory;\n  var NS_Rdf = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\n  var IRI_RdfType = NS_Rdf + 'type';\n  var NS_Layout = 'http://janeirodigital.com/layout#';\n  var TERM_RdfType = F.namedNode(IRI_RdfType);\n  var TERM_LayoutType = F.namedNode(NS_Layout + 'Layout');\n  var TERM_LayoutAnnotation = F.namedNode(NS_Layout + 'annotation');\n  var TERM_LayoutPath = F.namedNode(NS_Layout + 'path');\n  var TERM_LayoutRef = F.namedNode(NS_Layout + 'ref'); //TODO: This is Eric's code, and requires an update to shex.js with shexpath to work. Leaving for now\n\n  var annotateSchema = function annotateSchema(schema, layout) {\n    var newSchema = JSON.parse(JSON.stringify(schema)); // modify copy, not original.\n\n    var index = Util.index(newSchema); // update index to point at copy.\n\n    var shexPath = Util.shexPath(newSchema, Meta.shexc);\n    layout.getQuads(null, TERM_RdfType, TERM_LayoutType).forEach(function (quad) {\n      var annotated = layout.getQuads(quad.subject, TERM_LayoutAnnotation, null).map(function (t) {\n        var elt = null;\n        var quads = layout.getQuads(t.object, TERM_LayoutRef, null);\n\n        if (quads.length) {\n          if (!index) index = Util.index(newSchema);\n          var lookFor = quads[0].object.value;\n          elt = index.shapeExprs[lookFor] || index.tripleExprs[lookFor];\n        } else {\n          var pathStr = layout.getQuads(t.object, TERM_LayoutPath, null)[0].object.value;\n          elt = shexPath.search(pathStr)[0];\n        }\n\n        var newAnnots = layout.getQuads(t.object, null, null).filter(function (t) {\n          return !t.predicate.equals(TERM_LayoutPath);\n        }).map(function (t) {\n          return {\n            type: 'Annotation',\n            predicate: t.predicate.value,\n            object: RDFJStoJSONLD(t.object)\n          };\n        });\n        elt.annotations = newAnnots; // @@ merge, overriding same predicate values?\n\n        return elt;\n      });\n    });\n    console.log(newSchema);\n    return newSchema;\n  };\n  /* eslint-enable */\n\n  /**\n   * Helper function to detect if choice is ShEx or SHACL\n   * @param value\n   * @returns {boolean}\n   */\n\n\n  var isShEx = function isShEx(value) {\n    return value === t(\"formLanguage.\".concat(ConverterTypes.Shex)) || value === t(\"formLanguage.\".concat(ConverterTypes.ShexLayout));\n  };\n  /**\n   * Helper function to detect if choice has a layout or extension or not\n   * @param value\n   * @returns {boolean}\n   */\n\n\n  var hasLayout = function hasLayout(value) {\n    return value === t(\"formLanguage.\".concat(ConverterTypes.ShaclExtension)) || value === t(\"formLanguage.\".concat(ConverterTypes.ShexLayout));\n  };\n  /**\n   * Change event for the shape/schema URL field\n   */\n\n\n  var onSchemaChange = useCallback(function (e) {\n    setSchemaUrl(e.target.value);\n    setFormModel('');\n  });\n  /**\n   * Change event for layout/extension URL field\n   */\n\n  var onLayoutChange = useCallback(function (e) {\n    setLayoutUrl(e.target.value);\n    setFormModel('');\n  });\n  /**\n   * Use the form library to convert a shex shape to a form model and\n   * set the response to output to a text area\n   * @returns {Promise<void>}\n   */\n\n  var convertShex = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var formModel, schema, shexClass, newSchema, layout, response, formModelOutput;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // This code may move to another function, to allow for layouts\n            formModel = new FormModel();\n            _context.next = 3;\n            return formModel.parseSchema(schemaUrl);\n\n          case 3:\n            schema = _context.sent;\n\n            if (!hasLayoutFile) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 7;\n            return fetch(layoutUrl);\n\n          case 7:\n            response = _context.sent;\n            _context.next = 10;\n            return response.text();\n\n          case 10:\n            layout = _context.sent;\n            newSchema = annotateSchema(schema, layout);\n            shexClass = new ShexFormModel(newSchema);\n            console.log(newSchema); // eslint-disable-line no-console\n\n            _context.next = 17;\n            break;\n\n          case 16:\n            shexClass = new ShexFormModel(schema);\n\n          case 17:\n            formModelOutput = shexClass.convert();\n            setFormModel(formModelOutput);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n  /**\n   * Convert SHACL\n   */\n\n  var convertShacl = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var validator, response, shape, newResponse, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              validator = new SHACLValidator();\n              _context2.next = 3;\n              return fetch('https://jmartin.inrupt.net/public/shapes/book-shacl.ttl');\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return response.text();\n\n            case 6:\n              shape = _context2.sent;\n              _context2.next = 9;\n              return fetch('https://jmartin.inrupt.net/public/books/book.ttl');\n\n            case 9:\n              newResponse = _context2.sent;\n              _context2.next = 12;\n              return newResponse.text();\n\n            case 12:\n              data = _context2.sent;\n              // TODO: Currently this is just validating the shacl. This is where the converter code will be called once it is ready\n              validator.validate(data, 'text/turtle', shape, 'text/turtle', function (e, report) {\n                if (report.conforms() === false) {\n                  var message = 'Error in ';\n                  report.results().forEach(function (result) {\n                    // TODO: Put this in a function to handle shacl errors\n                    result.resultNode['http://www.w3.org/ns/shacl#resultPath'].forEach(function (m) {\n                      message += \"\".concat(m['@id'], \" \");\n                    });\n                    message += ' with the following errors: ';\n                    result.resultNode['http://www.w3.org/ns/shacl#resultMessage'].forEach(function (n) {\n                      message += \"\".concat(n['@value'], \" \\n\");\n                    });\n                  }); // Reports out the errors\n\n                  console.log(message); // eslint-disable-line no-console\n                }\n              });\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function convertShacl() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Submit function for the form, to do the conversion and set up the output\n   */\n\n\n  var onSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(e) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              e.preventDefault();\n              _context3.prev = 1;\n              _context3.t0 = selectedInput;\n              _context3.next = _context3.t0 === t('formLanguage.shacl') ? 5 : _context3.t0 === t('formLanguage.shaclExtension') ? 8 : _context3.t0 === t('formLanguage.shex') ? 9 : _context3.t0 === t('formLanguage.shexLayout') ? 12 : 15;\n              break;\n\n            case 5:\n              _context3.next = 7;\n              return convertShacl();\n\n            case 7:\n              return _context3.abrupt(\"break\", 17);\n\n            case 8:\n              return _context3.abrupt(\"break\", 17);\n\n            case 9:\n              _context3.next = 11;\n              return convertShex();\n\n            case 11:\n              return _context3.abrupt(\"break\", 17);\n\n            case 12:\n              _context3.next = 14;\n              return convertShex();\n\n            case 14:\n              return _context3.abrupt(\"break\", 17);\n\n            case 15:\n              errorToaster(t('notifications.unknownError'), t('notifications.error'));\n              return _context3.abrupt(\"break\", 17);\n\n            case 17:\n              _context3.next = 22;\n              break;\n\n            case 19:\n              _context3.prev = 19;\n              _context3.t1 = _context3[\"catch\"](1);\n              errorToaster(_context3.t1.message, t('notifications.error'));\n\n            case 22:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 19]]);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  /**\n   * Copy the form model directly to the user's computer's clipboard\n   */\n\n  var copyToClipboard = useCallback(function () {\n    navigator.clipboard.writeText(formModel);\n    successToaster(t('formLanguage.converter.copySuccess'), t('notifications.success'));\n  });\n  /**\n   * Change event for the input list change, setting up the form conditions\n   */\n\n  var onListChange = useCallback(function (e) {\n    var newValue = e.target.value; // Set the label for the label or extension field\n\n    if (isShEx(newValue)) {\n      setLayoutText(t('formLanguage.layout'));\n      setShapeText(t('formLanguage.shexShape'));\n    } else {\n      setLayoutText(t('formLanguage.extension'));\n      setShapeText(t('formLanguage.shaclShape'));\n    } // Set boolean to disable or enable the layout/extension textbox\n\n\n    setHasLayoutFile(hasLayout(newValue));\n    setSelectedInput(newValue);\n  });\n  return React.createElement(FormModelContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(FormWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, t('formLanguage.converter.title')), React.createElement(ConverterInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"selected-filter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, t('formLanguage.input')), React.createElement(Select, {\n    name: \"selected-filter\",\n    id: \"selected-filter\",\n    options: optionsList,\n    onChange: onListChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  })), React.createElement(ConverterInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"converter-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, shapeText), React.createElement(Input, {\n    type: \"text\",\n    placeholder: \"ShExC\",\n    name: \"converter-input\",\n    id: \"converter-input\",\n    onChange: onSchemaChange,\n    value: schemaUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  })), React.createElement(ConverterInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"layout-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, layoutText), React.createElement(Input, {\n    type: \"text\",\n    placeholder: layoutText,\n    onChange: onLayoutChange,\n    disabled: !hasLayoutFile,\n    value: layoutUrl,\n    name: \"layout-input\",\n    id: \"layout-input\",\n    \"data-testid\": \"layout-text-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  })), React.createElement(Button, {\n    type: \"submit\",\n    \"data-testid\": \"convert-button\",\n    disabled: !(schemaUrl !== ''),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, t('formLanguage.converter.convert'))), React.createElement(Result, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, React.createElement(ResultHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, t('formLanguage.formModel')), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: copyToClipboard,\n    \"data-testid\": \"copy-button\",\n    disabled: !formModel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, t('formLanguage.copyToClipboard'))), React.createElement(\"textarea\", {\n    value: formModel,\n    onChange: function onChange() {\n      return formModel;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }))));\n};\n\nexport default FormModelConverter;","map":{"version":3,"sources":["c:/Users/alber/Desktop/ejemplo/src/containers/FormModel/Converter/converter.component.js"],"names":["React","useCallback","useState","successToaster","errorToaster","Select","ShexFormModel","FormModel","ConverterTypesList","ConverterTypes","useTranslation","Util","SHACLValidator","N3","FormModelContainer","FormWrapper","Form","Input","Result","ResultHeader","Button","ConverterInput","FormModelConverter","t","schemaUrl","setSchemaUrl","layoutUrl","setLayoutUrl","formModel","setFormModel","selectedInput","setSelectedInput","layoutText","setLayoutText","shapeText","setShapeText","hasLayoutFile","setHasLayoutFile","filteredOptions","filter","item","optionsList","map","Meta","shexc","prefixes","base","window","location","href","data","layout","F","DataFactory","NS_Rdf","IRI_RdfType","NS_Layout","TERM_RdfType","namedNode","TERM_LayoutType","TERM_LayoutAnnotation","TERM_LayoutPath","TERM_LayoutRef","annotateSchema","schema","newSchema","JSON","parse","stringify","index","shexPath","getQuads","forEach","quad","annotated","subject","elt","quads","object","length","lookFor","value","shapeExprs","tripleExprs","pathStr","search","newAnnots","predicate","equals","type","RDFJStoJSONLD","annotations","console","log","isShEx","Shex","ShexLayout","hasLayout","ShaclExtension","onSchemaChange","e","target","onLayoutChange","convertShex","parseSchema","fetch","response","text","shexClass","formModelOutput","convert","convertShacl","validator","shape","newResponse","validate","report","conforms","message","results","result","resultNode","m","n","onSubmit","preventDefault","copyToClipboard","navigator","clipboard","writeText","onListChange","newValue"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { successToaster, errorToaster } from '@utils';\nimport { Select } from '@util-components';\nimport { ShexFormModel, FormModel } from '@inrupt/solid-sdk-forms';\nimport { ConverterTypesList, ConverterTypes } from '@constants';\nimport { useTranslation } from 'react-i18next';\nimport { Util } from '@shexjs/core';\nimport SHACLValidator from 'shacl-js';\nimport * as N3 from 'n3';\nimport {\n  FormModelContainer,\n  FormWrapper,\n  Form,\n  Input,\n  Result,\n  ResultHeader,\n  Button,\n  ConverterInput\n} from '../form-model.style';\n\n/**\n * Form Model Converter UI component, containing the styled components for the Form Model Converter\n * @param props\n */\nconst FormModelConverter = () => {\n  const { t } = useTranslation();\n  const [schemaUrl, setSchemaUrl] = useState('');\n  const [layoutUrl, setLayoutUrl] = useState('');\n  const [formModel, setFormModel] = useState('');\n  const [selectedInput, setSelectedInput] = useState(t('formLanguage.shex'));\n  const [layoutText, setLayoutText] = useState(t('formLanguage.shexLayout'));\n  const [shapeText, setShapeText] = useState(t('formLanguage.shexShape'));\n  const [hasLayoutFile, setHasLayoutFile] = useState(false);\n\n  // Temporarily filtering out anything except ShEx as that's all that works currently\n  const filteredOptions = ConverterTypesList.filter(\n    item => t(`formLanguage.${item}`) === t('formLanguage.shex')\n  );\n  const optionsList = filteredOptions.map(item => t(`formLanguage.${item}`));\n\n  const Meta = {\n    shexc: {\n      prefixes: {},\n      base: window.location.href\n    },\n    data: {\n      prefixes: {},\n      base: window.location.href\n    },\n    layout: {\n      prefixes: {},\n      base: window.location.href\n    }\n  };\n\n  // Temporary code for Shex Layout testing\n  /* eslint-disable */\n  // This is from Eric's code and is required for AnnotateSchema\n  const F = N3.DataFactory;\n  const NS_Rdf = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\n  const IRI_RdfType = NS_Rdf + 'type';\n  const NS_Layout = 'http://janeirodigital.com/layout#';\n  const TERM_RdfType = F.namedNode(IRI_RdfType);\n  const TERM_LayoutType = F.namedNode(NS_Layout + 'Layout');\n  const TERM_LayoutAnnotation = F.namedNode(NS_Layout + 'annotation');\n  const TERM_LayoutPath = F.namedNode(NS_Layout + 'path');\n  const TERM_LayoutRef = F.namedNode(NS_Layout + 'ref');\n\n  //TODO: This is Eric's code, and requires an update to shex.js with shexpath to work. Leaving for now\n  const annotateSchema = (schema, layout) => {\n    const newSchema = JSON.parse(JSON.stringify(schema)); // modify copy, not original.\n    let index = Util.index(newSchema); // update index to point at copy.\n    const shexPath = Util.shexPath(newSchema, Meta.shexc);\n    layout.getQuads(null, TERM_RdfType, TERM_LayoutType).forEach(quad => {\n      const annotated = layout.getQuads(quad.subject, TERM_LayoutAnnotation, null).map(t => {\n        let elt = null;\n        const quads = layout.getQuads(t.object, TERM_LayoutRef, null);\n        if (quads.length) {\n          if (!index) index = Util.index(newSchema);\n          let lookFor = quads[0].object.value;\n          elt = index.shapeExprs[lookFor] || index.tripleExprs[lookFor];\n        } else {\n          const pathStr = layout.getQuads(t.object, TERM_LayoutPath, null)[0].object.value;\n          elt = shexPath.search(pathStr)[0];\n        }\n        const newAnnots = layout\n          .getQuads(t.object, null, null)\n          .filter(t => !t.predicate.equals(TERM_LayoutPath))\n          .map(t => {\n            return {\n              type: 'Annotation',\n              predicate: t.predicate.value,\n              object: RDFJStoJSONLD(t.object)\n            };\n          });\n        elt.annotations = newAnnots; // @@ merge, overriding same predicate values?\n        return elt;\n      });\n    });\n    console.log(newSchema);\n    return newSchema;\n  };\n  /* eslint-enable */\n\n  /**\n   * Helper function to detect if choice is ShEx or SHACL\n   * @param value\n   * @returns {boolean}\n   */\n  const isShEx = value =>\n    value === t(`formLanguage.${ConverterTypes.Shex}`) ||\n    value === t(`formLanguage.${ConverterTypes.ShexLayout}`);\n\n  /**\n   * Helper function to detect if choice has a layout or extension or not\n   * @param value\n   * @returns {boolean}\n   */\n  const hasLayout = value =>\n    value === t(`formLanguage.${ConverterTypes.ShaclExtension}`) ||\n    value === t(`formLanguage.${ConverterTypes.ShexLayout}`);\n\n  /**\n   * Change event for the shape/schema URL field\n   */\n  const onSchemaChange = useCallback((e: Event) => {\n    setSchemaUrl(e.target.value);\n    setFormModel('');\n  });\n\n  /**\n   * Change event for layout/extension URL field\n   */\n  const onLayoutChange = useCallback((e: Event) => {\n    setLayoutUrl(e.target.value);\n    setFormModel('');\n  });\n\n  /**\n   * Use the form library to convert a shex shape to a form model and\n   * set the response to output to a text area\n   * @returns {Promise<void>}\n   */\n  const convertShex = useCallback(async () => {\n    // This code may move to another function, to allow for layouts\n    const formModel = new FormModel();\n    const schema = await formModel.parseSchema(schemaUrl);\n    let shexClass;\n    let newSchema;\n    let layout;\n\n    if (hasLayoutFile) {\n      const response = await fetch(layoutUrl);\n      layout = await response.text();\n      newSchema = annotateSchema(schema, layout);\n      shexClass = new ShexFormModel(newSchema);\n      console.log(newSchema); // eslint-disable-line no-console\n    } else {\n      shexClass = new ShexFormModel(schema);\n    }\n    const formModelOutput = shexClass.convert();\n    setFormModel(formModelOutput);\n  });\n\n  /**\n   * Convert SHACL\n   */\n  const convertShacl = async () => {\n    const validator = new SHACLValidator();\n    const response = await fetch('https://jmartin.inrupt.net/public/shapes/book-shacl.ttl');\n    const shape = await response.text();\n    const newResponse = await fetch('https://jmartin.inrupt.net/public/books/book.ttl');\n    const data = await newResponse.text();\n\n    // TODO: Currently this is just validating the shacl. This is where the converter code will be called once it is ready\n    validator.validate(data, 'text/turtle', shape, 'text/turtle', (e, report) => {\n      if (report.conforms() === false) {\n        let message = 'Error in ';\n        report.results().forEach(result => {\n          // TODO: Put this in a function to handle shacl errors\n          result.resultNode['http://www.w3.org/ns/shacl#resultPath'].forEach(m => {\n            message += `${m['@id']} `;\n          });\n\n          message += ' with the following errors: ';\n\n          result.resultNode['http://www.w3.org/ns/shacl#resultMessage'].forEach(n => {\n            message += `${n['@value']} \\n`;\n          });\n        });\n\n        // Reports out the errors\n        console.log(message); // eslint-disable-line no-console\n      }\n    });\n  };\n\n  /**\n   * Submit function for the form, to do the conversion and set up the output\n   */\n  const onSubmit = useCallback(async (e: Event) => {\n    e.preventDefault();\n    try {\n      switch (selectedInput) {\n        case t('formLanguage.shacl'):\n          // Convert Shacl\n          await convertShacl();\n          break;\n        case t('formLanguage.shaclExtension'):\n          // Convert Shacl with extension\n          break;\n        case t('formLanguage.shex'):\n          await convertShex();\n          break;\n        case t('formLanguage.shexLayout'):\n          // TODO: Add layout code\n          await convertShex();\n          break;\n        default:\n          errorToaster(t('notifications.unknownError'), t('notifications.error'));\n          break;\n      }\n    } catch (e) {\n      errorToaster(e.message, t('notifications.error'));\n    }\n  });\n\n  /**\n   * Copy the form model directly to the user's computer's clipboard\n   */\n  const copyToClipboard = useCallback(() => {\n    navigator.clipboard.writeText(formModel);\n    successToaster(t('formLanguage.converter.copySuccess'), t('notifications.success'));\n  });\n\n  /**\n   * Change event for the input list change, setting up the form conditions\n   */\n  const onListChange = useCallback((e: Event) => {\n    const newValue = e.target.value;\n\n    // Set the label for the label or extension field\n    if (isShEx(newValue)) {\n      setLayoutText(t('formLanguage.layout'));\n      setShapeText(t('formLanguage.shexShape'));\n    } else {\n      setLayoutText(t('formLanguage.extension'));\n      setShapeText(t('formLanguage.shaclShape'));\n    }\n\n    // Set boolean to disable or enable the layout/extension textbox\n    setHasLayoutFile(hasLayout(newValue));\n    setSelectedInput(newValue);\n  });\n\n  return (\n    <FormModelContainer>\n      <FormWrapper>\n        <Form onSubmit={onSubmit}>\n          <h3>{t('formLanguage.converter.title')}</h3>\n          <ConverterInput>\n            <label htmlFor=\"selected-filter\">{t('formLanguage.input')}</label>\n            <Select\n              name=\"selected-filter\"\n              id=\"selected-filter\"\n              options={optionsList}\n              onChange={onListChange}\n            />\n          </ConverterInput>\n          <ConverterInput>\n            <label htmlFor=\"converter-input\">{shapeText}</label>\n            <Input\n              type=\"text\"\n              placeholder=\"ShExC\"\n              name=\"converter-input\"\n              id=\"converter-input\"\n              onChange={onSchemaChange}\n              value={schemaUrl}\n            />\n          </ConverterInput>\n          <ConverterInput>\n            <label htmlFor=\"layout-input\">{layoutText}</label>\n            <Input\n              type=\"text\"\n              placeholder={layoutText}\n              onChange={onLayoutChange}\n              disabled={!hasLayoutFile}\n              value={layoutUrl}\n              name=\"layout-input\"\n              id=\"layout-input\"\n              data-testid=\"layout-text-box\"\n            />\n          </ConverterInput>\n          <Button type=\"submit\" data-testid=\"convert-button\" disabled={!(schemaUrl !== '')}>\n            {t('formLanguage.converter.convert')}\n          </Button>\n        </Form>\n        <Result>\n          <ResultHeader>\n            <h4>{t('formLanguage.formModel')}</h4>\n            <button\n              type=\"button\"\n              onClick={copyToClipboard}\n              data-testid=\"copy-button\"\n              disabled={!formModel}\n            >\n              {t('formLanguage.copyToClipboard')}\n            </button>\n          </ResultHeader>\n          <textarea value={formModel} onChange={() => formModel} />\n        </Result>\n      </FormWrapper>\n    </FormModelContainer>\n  );\n};\n\nexport default FormModelConverter;\n"]},"metadata":{},"sourceType":"module"}