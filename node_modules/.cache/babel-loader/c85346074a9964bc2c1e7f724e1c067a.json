{"ast":null,"code":"import _regeneratorRuntime from \"c:\\\\Users\\\\alber\\\\Desktop\\\\ejemplo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"c:\\\\Users\\\\alber\\\\Desktop\\\\ejemplo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"c:\\\\Users\\\\alber\\\\Desktop\\\\ejemplo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"c:\\\\Users\\\\alber\\\\Desktop\\\\ejemplo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"c:\\\\Users\\\\alber\\\\Desktop\\\\ejemplo\\\\src\\\\containers\\\\FormModel\\\\Renderer\\\\form-renderer.component.js\";\n\n/* eslint-disable no-console */\nimport React, { useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FormModel } from '@inrupt/solid-react-components';\nimport { Select, Loader } from \"../../../components/Utils\";\nimport ldflex from '@solid/query-ldflex';\nimport { RendererTypesList, ConverterTypes } from \"../../../constants\";\nimport { successToaster, errorToaster } from \"../../../utils\";\nimport { FormModelContainer, FormWrapper, FormRenderContainer, Form, Input, Result, ResultHeader, Button, ConverterInput } from \"../form-model.style\";\nimport '@inrupt/solid-react-components/build/static/css/index.css';\nimport { AutoSaveSpinner } from \"../../../components\";\n/**\n * Form Model Renderer UI component, containing the styled components for the Form Model Converter\n */\n\nvar FormModelRenderer = function FormModelRenderer() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(t('formLanguage.formModel')),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedInput = _useState2[0],\n      setSelectedInput = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      layoutUrl = _useState4[0],\n      setLayoutUrl = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var _useState7 = useState(t('formLanguage.extension')),\n      _useState8 = _slicedToArray(_useState7, 2),\n      layoutText = _useState8[0],\n      setLayoutText = _useState8[1];\n\n  var _useState9 = useState(t('formLanguage.formModel')),\n      _useState10 = _slicedToArray(_useState9, 2),\n      shapeText = _useState10[0],\n      setShapeText = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      source = _useState12[0],\n      setSource = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      schemaUrl = _useState14[0],\n      setSchemaUrl = _useState14[1];\n\n  var _useState15 = useState(null),\n      _useState16 = _slicedToArray(_useState15, 2),\n      submitted = _useState16[0],\n      setSubmitted = _useState16[1];\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      hasLayoutFile = _useState18[0],\n      setHasLayoutFile = _useState18[1];\n\n  var _useState19 = useState(true),\n      _useState20 = _slicedToArray(_useState19, 2),\n      isViewMode = _useState20[0],\n      setViewMode = _useState20[1];\n\n  var filteredOptions = RendererTypesList.filter(function (item) {\n    return t(\"formLanguage.\".concat(item)) === t('formLanguage.formModel');\n  });\n  var optionsList = filteredOptions.map(function (item) {\n    return t(\"formLanguage.\".concat(item));\n  });\n  /**\n   * Helper function to detect if choice is ShEx\n   * @param value\n   * @returns {boolean}\n   */\n\n  var isShEx = function isShEx(value) {\n    return value === t(\"formLanguage.\".concat(ConverterTypes.Shex)) || value === t(\"formLanguage.\".concat(ConverterTypes.ShexLayout));\n  };\n  /**\n   * Helper function to detect if choice is SHACL\n   * @param value\n   * @returns {boolean}\n   */\n\n\n  var isShacl = function isShacl(value) {\n    return value === t(\"formLanguage.\".concat(ConverterTypes.Shacl)) || value === t(\"formLanguage.\".concat(ConverterTypes.ShaclExtension));\n  };\n  /**\n   * Helper function to detect if choice has a layout or extension or not\n   * @param value\n   * @returns {boolean}\n   */\n\n\n  var hasLayout = function hasLayout(value) {\n    return value === t(\"formLanguage.\".concat(ConverterTypes.ShaclExtension)) || value === t(\"formLanguage.\".concat(ConverterTypes.ShexLayout));\n  };\n  /**\n   * Change event for the shape/schema URL field\n   */\n\n\n  var onSchemaChange = useCallback(function (e) {\n    setSchemaUrl(e.target.value);\n  });\n  /**\n   * Change event for layout/extension URL field\n   */\n\n  var onLayoutChange = useCallback(function (e) {\n    setLayoutUrl(e.target.value);\n  });\n  /**\n   * Change event for the source\n   */\n\n  var onSourceChange = useCallback(function (e) {\n    setSource(e.target.value);\n  });\n  /**\n   * Submit function for the form, to do the conversion and set up the output\n   * This function is for the view button\n   * Clears the ldflex cache before submission\n   * in case something changed in the pod and not on the generator side,\n   * it will attempt to fetch the file again and not the cached one\n   */\n\n  function onSubmit(_x) {\n    return _onSubmit.apply(this, arguments);\n  }\n  /**\n   * Change event for the input list change, setting up the form conditions\n   */\n\n\n  function _onSubmit() {\n    _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var obj;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              ldflex.clearCache();\n              _context.next = 4;\n              return setSubmitted(null);\n\n            case 4:\n              obj = {};\n              if (schemaUrl !== '') obj = _objectSpread({}, obj, {\n                schemaUrl: schemaUrl\n              });\n              if (source !== '') obj = _objectSpread({}, obj, {\n                source: source\n              });\n              setSubmitted(obj);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _onSubmit.apply(this, arguments);\n  }\n\n  var onListChange = useCallback(function (e) {\n    var newValue = e.target.value; // Set the label for the label or extension field\n\n    if (isShEx(newValue)) {\n      setLayoutText(t('formLanguage.layout'));\n      setShapeText(t('formLanguage.shexShape'));\n    } else if (isShacl(newValue)) {\n      setLayoutText(t('formLanguage.extension'));\n      setShapeText(t('formLanguage.shaclShape'));\n    } else {\n      setLayoutText(t('formLanguage.extension'));\n      setShapeText(t('formLanguage.formModel'));\n    } // Set boolean to disable or enable the layout/extension textbox\n\n\n    setHasLayoutFile(hasLayout(newValue));\n    setSelectedInput(newValue);\n    console.log(selectedInput);\n  });\n\n  var _onError = function onError(e) {\n    if (e.message.toString().indexOf('Validation failed') < 0) {\n      errorToaster(t('formLanguage.renderer.formNotLoaded'), t('notifications.error'), {\n        label: t('errorFormRender.link.label'),\n        href: t('errorFormRender.link.href')\n      });\n      setIsLoading(false);\n    }\n  };\n\n  var _onDelete = function onDelete() {\n    successToaster(t('formLanguage.renderer.fieldDeleted'), t('notifications.success'));\n  };\n\n  var _onAddNewField = function onAddNewField() {\n    successToaster(t('formLanguage.renderer.fieldAdded'), t('notifications.success'));\n  };\n\n  return React.createElement(FormModelContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(FormWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, t('formLanguage.renderer.title')), React.createElement(ConverterInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"selected-filter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, t('formLanguage.input')), React.createElement(Select, {\n    name: \"selected-filter\",\n    id: \"selected-filter\",\n    options: optionsList,\n    onChange: onListChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })), React.createElement(ConverterInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"converter-input-shape-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, shapeText), React.createElement(Input, {\n    type: \"text\",\n    placeholder: shapeText,\n    name: \"converter-input-shape-text\",\n    id: \"converter-input-shape-text\",\n    onChange: onSchemaChange,\n    value: schemaUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  })), React.createElement(ConverterInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"layout-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, layoutText), React.createElement(Input, {\n    type: \"text\",\n    placeholder: layoutText,\n    onChange: onLayoutChange,\n    disabled: !hasLayoutFile,\n    value: layoutUrl,\n    name: \"layout-input\",\n    id: \"layout-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })), React.createElement(ConverterInput, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"converter-input-form-language\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, t('formLanguage.source')), React.createElement(Input, {\n    type: \"text\",\n    placeholder: t('formLanguage.source'),\n    name: \"converter-input-form-language\",\n    id: \"converter-input-form-language\",\n    onChange: onSourceChange,\n    value: source,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })), React.createElement(Button, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, t('formLanguage.renderer.submitBtn'))), React.createElement(Result, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(ResultHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, t('formLanguage.formModel')), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"button\",\n    className: isViewMode ? 'active' : '',\n    onClick: function onClick() {\n      return setViewMode(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, t('formLanguage.renderer.viewBtn')), React.createElement(Button, {\n    type: \"button\",\n    className: !isViewMode ? 'active' : '',\n    onClick: function onClick() {\n      return setViewMode(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, t('formLanguage.renderer.editBtn'))))), React.createElement(FormRenderContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, submitted !== null && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, React.createElement(FormModel, Object.assign({\n    modelPath: submitted.schemaUrl,\n    podPath: submitted && submitted.source || '',\n    viewer: isViewMode,\n    onInit: function onInit() {\n      return setIsLoading(true);\n    },\n    onLoaded: function onLoaded() {\n      return setIsLoading(false);\n    },\n    onSuccess: function onSuccess() {},\n    onSave: function onSave() {},\n    onError: function onError(error) {\n      _onError(error);\n    },\n    onAddNewField: function onAddNewField(response) {\n      return _onAddNewField(response);\n    },\n    onDelete: function onDelete(response) {\n      return _onDelete(response);\n    },\n    settings: {\n      theme: {\n        inputText: 'input-wrap',\n        inputCheckbox: 'sdk-checkbox checkbox',\n        form: 'inrupt-sdk-form',\n        childGroup: 'inrupt-form-group'\n      },\n      savingComponent: AutoSaveSpinner\n    }\n  }, {\n    autoSave: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  })))), isLoading && React.createElement(Loader, {\n    absolute: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  })));\n};\n\nexport default FormModelRenderer;","map":{"version":3,"sources":["c:/Users/alber/Desktop/ejemplo/src/containers/FormModel/Renderer/form-renderer.component.js"],"names":["React","useCallback","useState","useTranslation","FormModel","Select","Loader","ldflex","RendererTypesList","ConverterTypes","successToaster","errorToaster","FormModelContainer","FormWrapper","FormRenderContainer","Form","Input","Result","ResultHeader","Button","ConverterInput","AutoSaveSpinner","FormModelRenderer","t","selectedInput","setSelectedInput","layoutUrl","setLayoutUrl","isLoading","setIsLoading","layoutText","setLayoutText","shapeText","setShapeText","source","setSource","schemaUrl","setSchemaUrl","submitted","setSubmitted","hasLayoutFile","setHasLayoutFile","isViewMode","setViewMode","filteredOptions","filter","item","optionsList","map","isShEx","value","Shex","ShexLayout","isShacl","Shacl","ShaclExtension","hasLayout","onSchemaChange","e","target","onLayoutChange","onSourceChange","onSubmit","preventDefault","clearCache","obj","onListChange","newValue","console","log","onError","message","toString","indexOf","label","href","onDelete","onAddNewField","modelPath","podPath","viewer","onInit","onLoaded","onSuccess","onSave","error","response","settings","theme","inputText","inputCheckbox","form","childGroup","savingComponent"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport React, { useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FormModel } from '@inrupt/solid-react-components';\nimport { Select, Loader } from '@util-components';\nimport ldflex from '@solid/query-ldflex';\n\nimport { RendererTypesList, ConverterTypes } from '@constants';\nimport { successToaster, errorToaster } from '@utils';\nimport {\n  FormModelContainer,\n  FormWrapper,\n  FormRenderContainer,\n  Form,\n  Input,\n  Result,\n  ResultHeader,\n  Button,\n  ConverterInput\n} from '../form-model.style';\n\nimport '@inrupt/solid-react-components/build/static/css/index.css';\nimport { AutoSaveSpinner } from '@components';\n\n/**\n * Form Model Renderer UI component, containing the styled components for the Form Model Converter\n */\nconst FormModelRenderer = () => {\n  const { t } = useTranslation();\n  const [selectedInput, setSelectedInput] = useState(t('formLanguage.formModel'));\n  const [layoutUrl, setLayoutUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [layoutText, setLayoutText] = useState(t('formLanguage.extension'));\n  const [shapeText, setShapeText] = useState(t('formLanguage.formModel'));\n  const [source, setSource] = useState('');\n  const [schemaUrl, setSchemaUrl] = useState('');\n  const [submitted, setSubmitted] = useState(null);\n  const [hasLayoutFile, setHasLayoutFile] = useState('');\n  const [isViewMode, setViewMode] = useState(true);\n\n  const filteredOptions = RendererTypesList.filter(\n    item => t(`formLanguage.${item}`) === t('formLanguage.formModel')\n  );\n  const optionsList = filteredOptions.map(item => t(`formLanguage.${item}`));\n\n  /**\n   * Helper function to detect if choice is ShEx\n   * @param value\n   * @returns {boolean}\n   */\n  const isShEx = value =>\n    value === t(`formLanguage.${ConverterTypes.Shex}`) ||\n    value === t(`formLanguage.${ConverterTypes.ShexLayout}`);\n\n  /**\n   * Helper function to detect if choice is SHACL\n   * @param value\n   * @returns {boolean}\n   */\n  const isShacl = value =>\n    value === t(`formLanguage.${ConverterTypes.Shacl}`) ||\n    value === t(`formLanguage.${ConverterTypes.ShaclExtension}`);\n\n  /**\n   * Helper function to detect if choice has a layout or extension or not\n   * @param value\n   * @returns {boolean}\n   */\n  const hasLayout = value =>\n    value === t(`formLanguage.${ConverterTypes.ShaclExtension}`) ||\n    value === t(`formLanguage.${ConverterTypes.ShexLayout}`);\n\n  /**\n   * Change event for the shape/schema URL field\n   */\n  const onSchemaChange = useCallback((e: Event) => {\n    setSchemaUrl(e.target.value);\n  });\n\n  /**\n   * Change event for layout/extension URL field\n   */\n  const onLayoutChange = useCallback((e: Event) => {\n    setLayoutUrl(e.target.value);\n  });\n\n  /**\n   * Change event for the source\n   */\n  const onSourceChange = useCallback((e: Event) => {\n    setSource(e.target.value);\n  });\n\n  /**\n   * Submit function for the form, to do the conversion and set up the output\n   * This function is for the view button\n   * Clears the ldflex cache before submission\n   * in case something changed in the pod and not on the generator side,\n   * it will attempt to fetch the file again and not the cached one\n   */\n  async function onSubmit(e: Event) {\n    e.preventDefault();\n    ldflex.clearCache();\n    await setSubmitted(null);\n    let obj = {};\n    if (schemaUrl !== '') obj = { ...obj, schemaUrl };\n    if (source !== '') obj = { ...obj, source };\n    setSubmitted(obj);\n  }\n\n  /**\n   * Change event for the input list change, setting up the form conditions\n   */\n  const onListChange = useCallback((e: Event) => {\n    const newValue = e.target.value;\n\n    // Set the label for the label or extension field\n    if (isShEx(newValue)) {\n      setLayoutText(t('formLanguage.layout'));\n      setShapeText(t('formLanguage.shexShape'));\n    } else if (isShacl(newValue)) {\n      setLayoutText(t('formLanguage.extension'));\n      setShapeText(t('formLanguage.shaclShape'));\n    } else {\n      setLayoutText(t('formLanguage.extension'));\n      setShapeText(t('formLanguage.formModel'));\n    }\n\n    // Set boolean to disable or enable the layout/extension textbox\n    setHasLayoutFile(hasLayout(newValue));\n    setSelectedInput(newValue);\n    console.log(selectedInput);\n  });\n\n  const onError = e => {\n    if (e.message.toString().indexOf('Validation failed') < 0) {\n      errorToaster(t('formLanguage.renderer.formNotLoaded'), t('notifications.error'), {\n        label: t('errorFormRender.link.label'),\n        href: t('errorFormRender.link.href')\n      });\n      setIsLoading(false);\n    }\n  };\n\n  const onDelete = () => {\n    successToaster(t('formLanguage.renderer.fieldDeleted'), t('notifications.success'));\n  };\n\n  const onAddNewField = () => {\n    successToaster(t('formLanguage.renderer.fieldAdded'), t('notifications.success'));\n  };\n\n  return (\n    <FormModelContainer>\n      <FormWrapper>\n        <Form onSubmit={onSubmit}>\n          <h3>{t('formLanguage.renderer.title')}</h3>\n          <ConverterInput>\n            <label htmlFor=\"selected-filter\">{t('formLanguage.input')}</label>\n            <Select\n              name=\"selected-filter\"\n              id=\"selected-filter\"\n              options={optionsList}\n              onChange={onListChange}\n            />\n          </ConverterInput>\n          <ConverterInput>\n            <label htmlFor=\"converter-input-shape-text\">{shapeText}</label>\n            <Input\n              type=\"text\"\n              placeholder={shapeText}\n              name=\"converter-input-shape-text\"\n              id=\"converter-input-shape-text\"\n              onChange={onSchemaChange}\n              value={schemaUrl}\n            />\n          </ConverterInput>\n          <ConverterInput>\n            <label htmlFor=\"layout-input\">{layoutText}</label>\n            <Input\n              type=\"text\"\n              placeholder={layoutText}\n              onChange={onLayoutChange}\n              disabled={!hasLayoutFile}\n              value={layoutUrl}\n              name=\"layout-input\"\n              id=\"layout-input\"\n            />\n          </ConverterInput>\n          <ConverterInput>\n            <label htmlFor=\"converter-input-form-language\">{t('formLanguage.source')}</label>\n            <Input\n              type=\"text\"\n              placeholder={t('formLanguage.source')}\n              name=\"converter-input-form-language\"\n              id=\"converter-input-form-language\"\n              onChange={onSourceChange}\n              value={source}\n            />\n          </ConverterInput>\n          <Button type=\"submit\">{t('formLanguage.renderer.submitBtn')}</Button>\n        </Form>\n        <Result>\n          <ResultHeader>\n            <h4>{t('formLanguage.formModel')}</h4>\n            <div>\n              <Button\n                type=\"button\"\n                className={isViewMode ? 'active' : ''}\n                onClick={() => setViewMode(true)}\n              >\n                {t('formLanguage.renderer.viewBtn')}\n              </Button>\n              <Button\n                type=\"button\"\n                className={!isViewMode ? 'active' : ''}\n                onClick={() => setViewMode(false)}\n              >\n                {t('formLanguage.renderer.editBtn')}\n              </Button>\n            </div>\n          </ResultHeader>\n        </Result>\n        <FormRenderContainer>\n          {submitted !== null && (\n            <div>\n              <FormModel\n                {...{\n                  modelPath: submitted.schemaUrl,\n                  podPath: (submitted && submitted.source) || '',\n                  viewer: isViewMode,\n                  onInit: () => setIsLoading(true),\n                  onLoaded: () => setIsLoading(false),\n                  onSuccess: () => {},\n                  onSave: () => {},\n                  onError: error => {\n                    onError(error);\n                  },\n                  onAddNewField: response => onAddNewField(response),\n                  onDelete: response => onDelete(response),\n                  settings: {\n                    theme: {\n                      inputText: 'input-wrap',\n                      inputCheckbox: 'sdk-checkbox checkbox',\n                      form: 'inrupt-sdk-form',\n                      childGroup: 'inrupt-form-group'\n                    },\n                    savingComponent: AutoSaveSpinner\n                  }\n                }}\n                autoSave\n              />\n            </div>\n          )}\n        </FormRenderContainer>\n        {isLoading && <Loader absolute />}\n      </FormWrapper>\n    </FormModelContainer>\n  );\n};\n\nexport default FormModelRenderer;\n"]},"metadata":{},"sourceType":"module"}